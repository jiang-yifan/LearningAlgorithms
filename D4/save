class Vertex
  attr_reader :edges, :seen
  attr_accessor :t
  def initialize
    @edges = []
    @seen = false
  end

  def toggle_seen
    @seen = @seen ? false : true
  end
end

class Edge
  attr_reader :seen, :vertices
  def initialize vertex1, vertex2
    @vertices = []
    @vertices << vertex1
    @vertices << vertex2
  end
end

def DFS vertex
  return 0 if vertex.seen
  vertex.toggle_seen
  count = 1
  vertex.edges.each do |edge|
    count += DFS edge.vertices[1]
  end
  count
end

def DFS_rev vertex
  return if vertex.seen
  vertex.toggle_seen
  vertex.edges.each do |edge|
    p "once"
    DFS edge.vertices[0]
  end
  vertex.t = $t
  $t += 1
end

vertex_arr = []
edge_arr = []
File.open("test1.txt").each_line do |line|
  values = line.chomp.split(" ").map{|el| el.to_i}
  values.each do |value|
    if !vertex_arr[value]
      vertex = Vertex.new
      vertex_arr[value] = vertex
    end
  end
end

File.open("test1.txt").each_line do |line|
  values = line.chomp.split(" ").map{|el| el.to_i}
  edge = Edge.new(vertex_arr[values[0]] , vertex_arr[values[1]])
  edge_arr << edge
  vertex_arr[values[0]].edges << edge
  vertex_arr[values[1]].edges << edge
end
vertex_arr.delete_at(0)
$t = 1

vertex_arr.each do |vertex|
  DFS_rev vertex
end

vertex_arr.each do |vertex|
  p vertex.t
end
vertex_arr.sort_by!{|p| p.t}
vertex_arr.reverse!

vertex_arr.each do |vertex|
  vertex.toggle_seen
end
counts = []
vertex_arr.each do |vertex|
  counts << DFS(vertex)
end
p counts.sort_by{|p| -p}[0...5]
